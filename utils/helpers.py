# utils/helpers.py
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è OnboardingBuddy
"""
import logging
import os
import json
from datetime import datetime
from typing import Any, Dict, List
from config.settings import settings


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = os.path.dirname(settings.LOG_FILE)
    os.makedirs(log_dir, exist_ok=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=log_level,
        format=log_format,
        handlers=[
            logging.FileHandler(settings.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.WARNING)


def format_datetime(dt: datetime, format_type: str = 'full') -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    formats = {
        'full': '%d.%m.%Y %H:%M:%S',
        'date': '%d.%m.%Y',
        'time': '%H:%M',
        'short': '%d.%m %H:%M',
        'iso': '%Y-%m-%dT%H:%M:%S'
    }

    return dt.strftime(formats.get(format_type, formats['full']))


def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
    if len(text) <= max_length:
        return text
    return text[:max_length - 3] + "..."


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text


def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return "‚ñë" * length

    progress = min(current / total, 1.0)
    filled = int(progress * length)
    empty = length - filled

    return "‚ñà" * filled + "‚ñë" * empty


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"

    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1

    return f"{size_bytes:.1f} {size_names[i]}"


def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def validate_telegram_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
    import re
    if not username.startswith('@'):
        return False
    pattern = r'^@[a-zA-Z0-9_]{5,32}$'
    return re.match(pattern, username) is not None


def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default


def safe_float(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def chunks(lst: List[Any], chunk_size: int) -> List[List[Any]]:
    """–†–∞–∑–±–∏–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]


def save_json(data: Dict[str, Any], filepath: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return False


def load_json(filepath: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return {}


def format_user_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = user_data.get('user_id', 'N/A')
    full_name = user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    username = user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
    status = user_data.get('status', 'unknown')
    stage = user_data.get('stage', 0)

    username_str = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"

    return f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}
üìù –ò–º—è: {full_name}
üè∑Ô∏è Username: {username_str}
üìä –°—Ç–∞—Ç—É—Å: {status}
üéØ –≠—Ç–∞–ø: {stage}/10
"""


def generate_report_filename(report_type: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    return f"{report_type}_{timestamp}.json"


def create_backup_filename(base_name: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    name, ext = os.path.splitext(base_name)
    return f"{name}_backup_{timestamp}{ext}"


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    import re
    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(filename) > 200:
        name, ext = os.path.splitext(filename)
        filename = name[:196] + ext
    return filename


def get_user_agent_info(update) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ update"""
    user = update.effective_user
    return {
        'user_id': str(user.id),
        'first_name': user.first_name or '',
        'last_name': user.last_name or '',
        'username': user.username or '',
        'full_name': user.full_name or '',
        'language_code': user.language_code or 'ru'
    }


def format_statistics(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    total_users = stats.get('total_users', 0)
    active_week = stats.get('active_week', 0)
    completion_rate = stats.get('completion_rate', 0)
    total_feedback = stats.get('total_feedback', 0)
    activity = active_week / total_users * 100 if total_users > 0 else 0

    return f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OnboardingBuddy

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}
üí¨ –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {total_feedback}
‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_rate}%

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity:.1f}%
"""


def calculate_completion_time(start_date: datetime, end_date: datetime = None) -> str:
    """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    if not end_date:
        end_date = datetime.now()

    delta = end_date - start_date

    if delta.days > 0:
        return f"{delta.days} –¥–Ω. {delta.seconds // 3600} —á."
    elif delta.seconds > 3600:
        return f"{delta.seconds // 3600} —á. {(delta.seconds % 3600) // 60} –º–∏–Ω."
    else:
        return f"{(delta.seconds % 3600) // 60} –º–∏–Ω."


def mask_sensitive_data(text: str) -> str:
    """–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–∞—Ö"""
    import re

    # –ú–∞—Å–∫–∏—Ä—É–µ–º email
    text = re.sub(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
                  lambda m: m.group(0)[:3] + '*' * (len(m.group(0)) - 6) + m.group(0)[-3:], text)

    # –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    text = re.sub(r'\b\+?[0-9]{1,3}[-.\s]?\(?[0-9]{3,4}\)?[-.\s]?[0-9]{3,4}[-.\s]?[0-9]{2,4}\b',
                  lambda m: m.group(0)[:3] + '*' * (len(m.group(0)) - 6) + m.group(0)[-3:], text)

    return text


def generate_unique_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    import uuid
    return str(uuid.uuid4())


def is_working_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    now = datetime.now()
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞ 9:00-18:00
    if now.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        return False
    return 9 <= now.hour <= 18


def get_greeting_by_time() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    hour = datetime.now().hour

    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 17:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= hour < 23:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"


def create_status_emoji_map() -> Dict[str, str]:
    """–ö–∞—Ä—Ç–∞ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤"""
    return {
        'new': 'üÜï',
        'preboarding': 'üîÑ',
        'preboarded': '‚úÖ',
        'onboarding': 'üöÄ',
        'completed': 'üéâ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'info': '‚ÑπÔ∏è',
        'success': '‚úÖ'
    }


def format_callback_data(action: str, kwargs) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not kwargs:
        return action

    params = '&'.join([f"{k}={v}" for k, v in kwargs.items()])
    return f"{action}?{params}"


def parse_callback_data(callback_data: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback_data"""
    if '?' not in callback_data:
        return callback_data, {}

    action, params_str = callback_data.split('?', 1)
    params = {}

    for param in params_str.split('&'):
        if '=' in param:
            key, value = param.split('=', 1)
            params[key] = value

    return action, params


class RateLimiter:
    """–ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞"""

    def __init__(self, max_requests: int = 10, time_window: int = 60):
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = {}

    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å"""
        now = datetime.now().timestamp()

        if user_id not in self.requests:
            self.requests[user_id] = []

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if now - req_time < self.time_window
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(now)
        return True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter()


def rate_limit_check(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return rate_limiter.is_allowed(user_id)


def create_data_directory_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
    directories = [
        'data',
        'data/logs',
        'data/exports',
        'data/backups',
        'data/temp'
    ]

    for directory in directories:
        os.makedirs(directory, exist_ok=True)


def cleanup_temp_files(max_age_hours: int = 24):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    temp_dir = 'data/temp'
    if not os.path.exists(temp_dir):
        return

    now = datetime.now().timestamp()
    max_age_seconds = max_age_hours * 3600

    for filename in os.listdir(temp_dir):
        filepath = os.path.join(temp_dir, filename)
        if os.path.isfile(filepath):
            file_age = now - os.path.getmtime(filepath)
            if file_age > max_age_seconds:
                try:
                    os.remove(filepath)
                    logging.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")


def get_system_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    import platform
    import psutil

    return {
        'platform': platform.platform(),
        'python_version': platform.python_version(),
        'cpu_percent': psutil.cpu_percent(interval=1),
        'memory_percent': psutil.virtual_memory().percent,
        'disk_usage': psutil.disk_usage('/').percent if os.name != 'nt' else psutil.disk_usage('C:').percent
    }