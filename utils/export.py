# utils/export.py
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö OnboardingBuddy
"""
import csv
import json
import os
from datetime import datetime
from typing import Dict, List, Any

from database.manager import db_manager
from utils.helpers import save_json, create_data_directory_structure


def export_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üì§ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö OnboardingBuddy...")

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_data_directory_structure()

    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

    try:
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        json_success = export_to_json(timestamp)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        csv_success = export_to_csv(timestamp)

        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        create_export_report(timestamp, json_success, csv_success)

        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: data/exports/")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


def export_to_json(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON"""
    print("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        export_data = db_manager.export_to_dict()

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        export_data['export_info'] = {
            'timestamp': timestamp,
            'format': 'json',
            'version': '1.0',
            'total_users': len(export_data['users']),
            'total_feedback': len(export_data['feedback']),
            'total_actions': len(export_data['actions'])
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"data/exports/onboarding_full_export_{timestamp}.json"
        success = save_json(export_data, filename)

        if success:
            print(f"‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON")

        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False


def export_to_csv(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª—ã"""
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç...")

    try:
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_success = export_users_csv(timestamp)

        # –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_success = export_feedback_csv(timestamp)

        # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        actions_success = export_actions_csv(timestamp)

        # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_success = export_statistics_csv(timestamp)

        all_success = all([users_success, feedback_success, actions_success, stats_success])

        if all_success:
            print("‚úÖ –í—Å–µ CSV —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ CSV —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")

        return all_success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False


def export_users_csv(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    try:
        users = db_manager.get_all_users()
        filename = f"data/exports/users_{timestamp}.csv"

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'user_id', 'username', 'full_name', 'position',
                'status', 'stage', 'progress_percentage',
                'created_at', 'updated_at'
            ])

            # –î–∞–Ω–Ω—ã–µ
            for user in users:
                writer.writerow([
                    user.user_id,
                    user.username or '',
                    user.full_name or '',
                    user.position or '',
                    user.status.value,
                    user.stage,
                    f"{user.progress_percentage:.1f}%",
                    user.created_at.isoformat() if user.created_at else '',
                    user.updated_at.isoformat() if user.updated_at else ''
                ])

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {filename} ({len(users)} –∑–∞–ø–∏—Å–µ–π)")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False


def export_feedback_csv(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ CSV"""
    try:
        feedback_list = db_manager.get_recent_feedback(limit=1000)  # –í—Å–µ —Ñ–∏–¥–±–µ–∫–∏
        filename = f"data/exports/feedback_{timestamp}.csv"

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'id', 'user_id', 'user_name', 'username',
                'message', 'created_at'
            ])

            # –î–∞–Ω–Ω—ã–µ
            for feedback in feedback_list:
                writer.writerow([
                    feedback['id'],
                    feedback['user_id'],
                    feedback['user_name'],
                    feedback['username'] or '',
                    feedback['message'],
                    feedback['created_at']
                ])

        print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {filename} ({len(feedback_list)} –∑–∞–ø–∏—Å–µ–π)")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        return False


def export_actions_csv(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        from datetime import timedelta
        cutoff_date = datetime.now() - timedelta(days=30)

        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –¥–∞—Ç–µ
        filename = f"data/exports/user_actions_{timestamp}.csv"

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
        popular_actions = db_manager.get_popular_actions(days=30, limit=100)

        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['action', 'count', 'period'])

            # –î–∞–Ω–Ω—ã–µ
            for action in popular_actions:
                writer.writerow([
                    action['action'],
                    action['count'],
                    '30 days'
                ])

        print(f"‚úÖ –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {filename} ({len(popular_actions)} –∑–∞–ø–∏—Å–µ–π)")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
        return False


def export_statistics_csv(timestamp: str) -> bool:
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV"""
    try:
        stats = db_manager.get_user_statistics()
        daily_activity = db_manager.get_daily_activity(days=30)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_filename = f"data/exports/statistics_{timestamp}.csv"
        with open(stats_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            writer.writerow(['metric', 'value'])
            writer.writerow(['total_users', stats['total_users']])
            writer.writerow(['active_week', stats['active_week']])
            writer.writerow(['completion_rate', f"{stats['completion_rate']}%"])
            writer.writerow(['avg_progress', stats['avg_progress']])
            writer.writerow(['total_feedback', stats['total_feedback']])

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for status, count in stats['status_stats'].items():
                writer.writerow([f'status_{status}', count])

        # –î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_filename = f"data/exports/daily_activity_{timestamp}.csv"
        with open(activity_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            writer.writerow(['date', 'unique_users', 'total_actions'])
            for day in daily_activity:
                writer.writerow([
                    day['date'],
                    day['unique_users'],
                    day['total_actions']
                ])

        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_filename}")
        print(f"‚úÖ –î–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_filename}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def create_export_report(timestamp: str, json_success: bool, csv_success: bool):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ"""
    try:
        report_filename = f"data/exports/export_report_{timestamp}.txt"

        stats = db_manager.get_user_statistics()

        report_content = f"""
OnboardingBuddy - –û—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö
==========================================

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Timestamp: {timestamp}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:
----------------------------------
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}
–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {stats['completion_rate']}%
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['avg_progress']:.1f}/10
–í—Å–µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {stats['total_feedback']}

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–¢–ê–¢–£–°–ê–ú:
-------------------------
"""

        status_names = {
            'new': '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'preboarding': '–ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
            'preboarded': '–ì–æ—Ç–æ–≤—ã –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É',
            'onboarding': '–ü—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥',
            'completed': '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'
        }

        for status, count in stats['status_stats'].items():
            name = status_names.get(status, status)
            percentage = (count / stats['total_users'] * 100) if stats['total_users'] > 0 else 0
            report_content += f"{name}: {count} ({percentage:.1f}%)\n"

        report_content += f"""
–†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–ü–û–†–¢–ê:
------------------
JSON —ç–∫—Å–ø–æ—Ä—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if json_success else '‚ùå –û—à–∏–±–∫–∞'}
CSV —ç–∫—Å–ø–æ—Ä—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if csv_success else '‚ùå –û—à–∏–±–∫–∞'}

–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:
---------------
"""

        if json_success:
            report_content += f"- onboarding_full_export_{timestamp}.json\n"

        if csv_success:
            report_content += f"- users_{timestamp}.csv\n"
            report_content += f"- feedback_{timestamp}.csv\n"
            report_content += f"- user_actions_{timestamp}.csv\n"
            report_content += f"- statistics_{timestamp}.csv\n"
            report_content += f"- daily_activity_{timestamp}.csv\n"

        report_content += f"""
–û–ü–ò–°–ê–ù–ò–ï –§–ê–ô–õ–û–í:
---------------
JSON —Ñ–∞–π–ª: –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
CSV —Ñ–∞–π–ª—ã: –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel/Google Sheets
- users.csv: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
- feedback.csv: –í—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- user_actions.csv: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- statistics.csv: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
- daily_activity.csv: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
------------
1. –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
3. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —ç—Ç–∞–ø–∞—Ö
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã

–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)

        print(f"‚úÖ –û—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ: {report_filename}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


def export_user_data(user_id: int) -> Dict[str, Any]:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db_manager.get_user(user_id)
        if not user:
            return {}

        actions = db_manager.get_user_actions(user_id, limit=100)

        user_data = {
            'user_info': user.to_dict(),
            'actions': [action.to_dict() for action in actions],
            'export_timestamp': datetime.now().isoformat()
        }

        return user_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}


def export_analytics_report() -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"data/exports/analytics_report_{timestamp}.json"

        stats = db_manager.get_user_statistics()
        daily_activity = db_manager.get_daily_activity(days=30)
        popular_actions = db_manager.get_popular_actions(days=30, limit=20)

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        total_users = stats['total_users']
        status_stats = stats['status_stats']

        conversion_funnel = {}
        if total_users > 0:
            conversion_funnel = {
                'registration_to_preboarding': (
                        sum(status_stats.get(s, 0) for s in ['preboarding', 'preboarded', 'onboarding', 'completed'])
                        / total_users * 100
                ),
                'preboarding_to_onboarding': (
                        sum(status_stats.get(s, 0) for s in ['onboarding', 'completed'])
                        / total_users * 100
                ),
                'onboarding_to_completion': (
                        status_stats.get('completed', 0) / total_users * 100
                )
            }

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_activity = {}
        for day_data in daily_activity:
            try:
                date_obj = datetime.fromisoformat(day_data['date'])
                weekday = date_obj.strftime('%A')
                if weekday not in weekday_activity:
                    weekday_activity[weekday] = {'users': 0, 'actions': 0, 'days': 0}
                weekday_activity[weekday]['users'] += day_data['unique_users']
                weekday_activity[weekday]['actions'] += day_data['total_actions']
                weekday_activity[weekday]['days'] += 1
            except:
                continue

        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        for day in weekday_activity:
            if weekday_activity[day]['days'] > 0:
                weekday_activity[day]['avg_users'] = round(
                    weekday_activity[day]['users'] / weekday_activity[day]['days'], 1
                )
                weekday_activity[day]['avg_actions'] = round(
                    weekday_activity[day]['actions'] / weekday_activity[day]['days'], 1
                )

        analytics_data = {
            'report_info': {
                'timestamp': timestamp,
                'period_days': 30,
                'generated_at': datetime.now().isoformat()
            },
            'summary': stats,
            'conversion_funnel': conversion_funnel,
            'daily_activity': daily_activity,
            'weekday_activity': weekday_activity,
            'popular_actions': popular_actions
        }

        success = save_json(analytics_data, filename)

        if success:
            print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç: {filename}")

        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        return False


if __name__ == '__main__':
    export_data()