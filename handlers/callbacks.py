# handlers/callbacks.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes

from config.settings import settings
from database.manager import db_manager

logger = logging.getLogger(__name__)


async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    # –õ–æ–≥–∏—Ä—É–µ–º callback
    db_manager.log_user_action(user_id, f"callback_{callback_data}", f"–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {callback_data}")

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback-–æ–≤ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º
    if callback_data.startswith("admin_"):
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback-—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ handlers/admin.py
        return

    elif callback_data.startswith("start_preboarding") or callback_data.startswith(
            "docs_") or callback_data == "all_docs_sent":
        # –ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥ callback-—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ handlers/preboarding.py
        from handlers.preboarding import handle_preboarding_callback
        await handle_preboarding_callback(update, context)

    elif callback_data.startswith("start_onboarding") or callback_data.startswith("email_") or callback_data in [
        "team_intro", "meetings", "complete_onboarding"]:
        # –û–Ω–±–æ—Ä–¥–∏–Ω–≥ callback-—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ handlers/onboarding.py
        from handlers.onboarding import handle_onboarding_callback
        await handle_onboarding_callback(update, context)

    elif callback_data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from handlers.start import start_command
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        fake_update = Update(
            update_id=update.update_id,
            message=query.message
        )
        fake_update.effective_user = query.from_user
        await start_command(fake_update, context)

    elif callback_data == "cancel":
        # –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    elif callback_data == "noop":
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–ª—É—à–µ–∫)
        pass

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )


async def handle_pagination_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤"""
    query = update.callback_query
    callback_data = query.data

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "users_page_2")
    parts = callback_data.split("_")
    if len(parts) >= 3 and parts[1] == "page":
        list_type = parts[0]
        page = int(parts[2])

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if list_type == "users":
            await show_users_page(query, context, page)
        elif list_type == "feedback":
            await show_feedback_page(query, context, page)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–ø–∏—Å–∫–æ–≤

    await query.answer()


async def show_users_page(query, context, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_per_page = 10
    all_users = db_manager.get_all_users()
    total_pages = (len(all_users) + users_per_page - 1) // users_per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * users_per_page
    end_idx = start_idx + users_per_page
    page_users = all_users[start_idx:end_idx]

    text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"

    for user in page_users:
        status_emoji = user.status_emoji
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        text += f"{status_emoji} {user.full_name} ({username})\n"
        text += f"   ‚îî {user.status_name}, —ç—Ç–∞–ø {user.stage}/10\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = Keyboards.get_pagination(page, total_pages, "users")

    await query.edit_message_text(text, reply_markup=keyboard)


async def show_feedback_page(query, context, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_per_page = 5
    all_feedback = db_manager.get_recent_feedback(limit=100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_pages = (len(all_feedback) + feedback_per_page - 1) // feedback_per_page

    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages

    start_idx = (page - 1) * feedback_per_page
    end_idx = start_idx + feedback_per_page
    page_feedback = all_feedback[start_idx:end_idx]

    text = f"üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"

    for feedback in page_feedback:
        username = f"@{feedback['username']}" if feedback['username'] else "–ù–µ—Ç username"
        text += f"üë§ {feedback['user_name']} ({username})\n"
        text += f"üìÖ {feedback['created_at'][:16]}\n"
        text += f"üí¨ {feedback['message']}\n\n"
        text += "‚îÄ" * 30 + "\n\n"

    keyboard = Keyboards.get_pagination(page, total_pages, "feedback")

    await query.edit_message_text(text, reply_markup=keyboard)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è callback-–æ–≤

def parse_callback_action(callback_data: str) -> tuple:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if "?" in callback_data:
        action, params_str = callback_data.split("?", 1)
        params = {}
        for param in params_str.split("&"):
            if "=" in param:
                key, value = param.split("=", 1)
                params[key] = value
        return action, params
    return callback_data, {}


def create_callback_data(action: str, params) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ callback_data —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if not params:
        return action

    params_str = "&".join([f"{k}={v}" for k, v in params.items()])
    return f"{action}?{params_str}"


async def handle_confirmation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    action, params = parse_callback_action(query.data)

    if action == "confirm_delete_user":
        user_id_to_delete = int(params.get("user_id", 0))
        # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
        await query.edit_message_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")

    elif action == "confirm_reset_progress":
        user_id_to_reset = int(params.get("user_id", 0))
        # –õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        await query.edit_message_text("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.")

    await query.answer()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö callback –∫–Ω–æ–ø–æ–∫

def create_user_action_keyboard(user_id: int):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from bot.keyboards import InlineKeyboardMarkup, InlineKeyboardButton

    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"user_details?user_id={user_id}"),
            InlineKeyboardButton("üìß –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_user?user_id={user_id}")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"reset_progress?user_id={user_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user?user_id={user_id}")
        ],
        [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])


async def handle_user_management_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    action, params = parse_callback_action(query.data)

    if action == "user_details":
        await show_user_details(query, context, int(params["user_id"]))
    elif action == "message_user":
        await initiate_user_message(query, context, int(params["user_id"]))
    elif action == "reset_progress":
        await confirm_reset_progress(query, context, int(params["user_id"]))
    elif action == "delete_user":
        await confirm_delete_user(query, context, int(params["user_id"]))

    await query.answer()


async def show_user_details(query, context, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = db_manager.get_user(user_id)

    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    actions = db_manager.get_user_actions(user_id, limit=10)

    text = f"""
üë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ ID: {user.user_id}
‚Ä¢ –ò–º—è: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

–ü—Ä–æ–≥—Ä–µ—Å—Å:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.status_emoji} {user.status_name}
‚Ä¢ –≠—Ç–∞–ø: {user.stage}/10 ({user.progress_percentage:.0f}%)
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user.updated_at.strftime('%d.%m.%Y %H:%M') if user.updated_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
"""

    for action in actions[:5]:
        text += f"‚Ä¢ {action.action} - {action.created_at.strftime('%d.%m %H:%M')}\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = create_user_action_keyboard(user_id)

    await query.edit_message_text(text, reply_markup=keyboard)


async def initiate_user_message(query, context, user_id: int):
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = db_manager.get_user(user_id)

    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"""
üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '–Ω–µ—Ç'})

–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –µ–º—É.

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel
"""

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['messaging_user_id'] = user_id
    context.user_data['waiting_admin_message'] = True

    await query.edit_message_text(text)


async def confirm_reset_progress(query, context, user_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user = db_manager.get_user(user_id)

    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"""
‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}
üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {user.stage}/10 —ç—Ç–∞–ø–æ–≤
üéØ –°—Ç–∞—Ç—É—Å: {user.status_name}

–î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–í—ã —É–≤–µ—Ä–µ–Ω—ã?
"""

    from bot.keyboards import Keyboards
    keyboard = Keyboards.get_confirmation(
        "—Å–±—Ä–æ—Å",
        f"confirm_reset_progress?user_id={user_id}",
        "back_to_admin"
    )

    await query.edit_message_text(text, reply_markup=keyboard)


async def confirm_delete_user(query, context, user_id: int):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db_manager.get_user(user_id)

    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"""
üö® –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user.stage}/10 —ç—Ç–∞–ø–æ–≤

‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:
–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
"""

    from bot.keyboards import Keyboards
    keyboard = Keyboards.get_confirmation(
        "—É–¥–∞–ª–µ–Ω–∏–µ",
        f"confirm_delete_user?user_id={user_id}",
        "back_to_admin"
    )

    await query.edit_message_text(text, reply_markup=keyboard)


# –ò–º–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
from bot.keyboards import Keyboards