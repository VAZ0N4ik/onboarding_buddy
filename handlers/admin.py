# handlers/admin.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
"""
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes

from config.settings import settings
from database.manager import db_manager
from database.models import UserStatus
from bot.keyboards import Keyboards
from utils.helpers import format_datetime, create_progress_bar, save_json

logger = logging.getLogger(__name__)


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id

    if not settings.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        db_manager.log_user_action(user_id, "admin_denied", "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    db_manager.log_user_action(user_id, "admin_access", "–í–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db_manager.get_user_statistics()
    popular_actions = db_manager.get_popular_actions(days=7, limit=5)
    recent_feedback = db_manager.get_recent_feedback(limit=5)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""
üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å OnboardingBuddy

üë• –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats['completion_rate']}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['avg_progress']}/10

üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_names = {
        'new': 'üÜï –ù–æ–≤—ã–µ',
        'preboarding': 'üîÑ –ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥',
        'preboarded': '‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É',
        'onboarding': 'üöÄ –ü—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥',
        'completed': 'üéâ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'
    }

    for status, name in status_names.items():
        count = stats['status_stats'].get(status, 0)
        percentage = (count / stats['total_users'] * 100) if stats['total_users'] > 0 else 0
        stats_text += f"{name}: {count} ({percentage:.1f}%)\n"

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if popular_actions:
        stats_text += "\nüî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–µ–¥–µ–ª—è):\n"
        for action_data in popular_actions:
            stats_text += f"‚Ä¢ {action_data['action']}: {action_data['count']}\n"

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if recent_feedback:
        stats_text += "\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n"
        for feedback in recent_feedback[:3]:
            short_message = feedback['message'][:50] + '...' if len(feedback['message']) > 50 else feedback['message']
            stats_text += f"üë§ {feedback['user_name']}: {short_message}\n"

    stats_text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(datetime.now(), 'short')}"

    keyboard = Keyboards.get_admin_panel()
    await update.message.reply_text(stats_text, reply_markup=keyboard)


async def admin_callback_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    user_id = query.from_user.id

    if not settings.is_admin(user_id):
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await query.answer()
    callback_data = query.data

    if callback_data == "admin_refresh":
        await admin_refresh_stats(query, context)
    elif callback_data == "admin_export":
        await admin_export_data(query, context)
    elif callback_data == "admin_broadcast":
        await admin_broadcast_info(query, context)
    elif callback_data == "admin_cleanup":
        await admin_cleanup_data(query, context)
    elif callback_data == "admin_analytics":
        await admin_detailed_analytics(query, context)


async def admin_refresh_stats(query, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    db_manager.log_user_action(query.from_user.id, "admin_refresh", "–û–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db_manager.get_user_statistics()

    text = f"""
üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞

üë• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: {stats['completion_rate']}%
‚Ä¢ –û–±—â–∏–π —Ñ–∏–¥–±–µ–∫: {stats['total_feedback']} —Å–æ–æ–±—â–µ–Ω–∏–π

üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º:
"""

    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    status_stats = stats['status_stats']
    total = stats['total_users']

    if total > 0:
        preboarding_rate = (status_stats.get('preboarding', 0) +
                            status_stats.get('preboarded', 0) +
                            status_stats.get('onboarding', 0) +
                            status_stats.get('completed', 0)) / total * 100

        onboarding_rate = (status_stats.get('onboarding', 0) +
                           status_stats.get('completed', 0)) / total * 100

        completion_rate = stats['completion_rate']

        text += f"‚Ä¢ –ù–∞—á–∞–ª–∏ –ø—Ä–µ–±–æ—Ä–¥–∏–Ω–≥: {preboarding_rate:.1f}%\n"
        text += f"‚Ä¢ –ü–µ—Ä–µ—à–ª–∏ –∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É: {onboarding_rate:.1f}%\n"
        text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é: {completion_rate:.1f}%\n"

    text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(datetime.now(), 'short')}"

    keyboard = Keyboards.get_admin_panel()
    await query.edit_message_text(text, reply_markup=keyboard)


async def admin_export_data(query, context):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    db_manager.log_user_action(query.from_user.id, "admin_export", "–ó–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        export_data = db_manager.export_to_dict()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"onboarding_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"data/exports/{filename}"

        success = save_json(export_data, filepath)

        if success:
            stats = db_manager.get_user_statistics()

            text = f"""
üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω

üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(export_data['users'])}
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {len(export_data['feedback'])}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(export_data['actions'])}

üìÅ –§–∞–π–ª: {filename}
üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_data['exported_at']}

üíæ –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:
"""

            status_counts = {}
            for user in export_data['users']:
                status = user['status']
                status_counts[status] = status_counts.get(status, 0) + 1

            for status, count in status_counts.items():
                text += f"‚Ä¢ {status}: {count}\n"

            text += f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É exports/"

        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

        await query.edit_message_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}"
        )


async def admin_broadcast_info(query, context):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    db_manager.log_user_action(query.from_user.id, "admin_broadcast_info", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ")

    stats = db_manager.get_user_statistics()

    text = f"""
üì¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

üë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_week']}

üìù –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/broadcast [–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]`

–ü—Ä–∏–º–µ—Ä:
`/broadcast –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏! –ó–∞–≤—Ç—Ä–∞ –≤ –æ—Ñ–∏—Å–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å team building. –ù–∞—á–∞–ª–æ –≤ 18:00.`

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏: {settings.BROADCAST_DELAY} —Å–µ–∫
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {settings.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if settings.NOTIFICATION_ENABLED else '‚ùå'}

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã –ø–æ–ª—É—á–∞—Ç –æ—à–∏–±–∫—É (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:
–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
"""

    await query.edit_message_text(text)


async def admin_cleanup_data(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    db_manager.log_user_action(query.from_user.id, "admin_cleanup", "–ó–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")

    try:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        deleted_count = db_manager.cleanup_old_data(days=90)

        text = f"""
üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–µ–π—Å—Ç–≤–∏–π: {deleted_count}
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ—á–∏—Å—Ç–∫–∏: —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
‚Ä¢ –î–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏: {format_datetime(datetime.now())}

üíæ –ß—Ç–æ –æ—á–∏—â–µ–Ω–æ:
‚Ä¢ –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_actions)
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏

üîí –ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users)
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (feedback)
‚Ä¢ –ó–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 90 –¥–Ω–µ–π

‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!
"""

        await query.edit_message_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}")


async def admin_detailed_analytics(query, context):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    db_manager.log_user_action(query.from_user.id, "admin_analytics", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        daily_activity = db_manager.get_daily_activity(days=30)
        stats = db_manager.get_user_statistics()
        popular_actions = db_manager.get_popular_actions(days=30, limit=10)

        text = f"""
üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (30 –¥–Ω–µ–π)

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {len([d for d in daily_activity if d['unique_users'] > 0])} –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {sum(d['unique_users'] for d in daily_activity) / len(daily_activity) if daily_activity else 0:.1f} –ø–æ–ª—å–∑/–¥–µ–Ω—å

üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤–æ—Ä–æ–Ω–∫–∏:
"""

        # –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
        status_stats = stats['status_stats']
        total = stats['total_users']

        if total > 0:
            funnel_stages = [
                ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', total, 100),
                ('–ù–∞—á–∞–ª–∏ –ø—Ä–µ–±–æ—Ä–¥–∏–Ω–≥',
                 sum(status_stats.get(s, 0) for s in ['preboarding', 'preboarded', 'onboarding', 'completed']), 0),
                ('–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–±–æ—Ä–¥–∏–Ω–≥', sum(status_stats.get(s, 0) for s in ['preboarded', 'onboarding', 'completed']),
                 0),
                ('–ù–∞—á–∞–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥', sum(status_stats.get(s, 0) for s in ['onboarding', 'completed']), 0),
                ('–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥', status_stats.get('completed', 0), 0)
            ]

            for i, (stage, count, percentage) in enumerate(funnel_stages):
                if i > 0:
                    percentage = count / total * 100
                funnel_stages[i] = (stage, count, percentage)
                text += f"‚Ä¢ {stage}: {count} ({percentage:.1f}%)\n"

        # –¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π
        text += f"\nüî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        for action_data in popular_actions[:5]:
            text += f"‚Ä¢ {action_data['action']}: {action_data['count']}\n"

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        text += f"\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):\n"
        recent_activity = daily_activity[-7:] if len(daily_activity) >= 7 else daily_activity
        for day_data in recent_activity:
            date_str = datetime.fromisoformat(day_data['date']).strftime('%d.%m')
            text += f"‚Ä¢ {date_str}: {day_data['unique_users']} –ø–æ–ª—å–∑, {day_data['total_actions']} –¥–µ–π—Å—Ç–≤–∏–π\n"

        # –ü—Ä–æ–≥–Ω–æ–∑
        if len(daily_activity) >= 7:
            recent_avg = sum(d['unique_users'] for d in recent_activity) / len(recent_activity)
            total_avg = sum(d['unique_users'] for d in daily_activity) / len(daily_activity)
            trend = "üìà –†–∞—Å—Ç–µ—Ç" if recent_avg > total_avg else "üìâ –°–Ω–∏–∂–∞–µ—Ç—Å—è" if recent_avg < total_avg else "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
            text += f"\nüìä –¢—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {trend}"

        await query.edit_message_text(text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n{str(e)}")


async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id

    if not settings.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/broadcast –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏! –ó–∞–≤—Ç—Ä–∞ –≤ –æ—Ñ–∏—Å–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å team building."
        )
        return

    message_text = " ".join(context.args)

    if len(message_text) > settings.MAX_MESSAGE_LENGTH:
        await update.message.reply_text(
            f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {settings.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    db_manager.log_user_action(user_id, "broadcast_start", f"–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É: {message_text[:50]}...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = db_manager.get_all_users()

    sent_count = 0
    failed_count = 0

    broadcast_text = f"""
üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ {settings.COMPANY_NAME}:

{message_text}

---
_–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç OnboardingBuddy._
_–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ HR._
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    status_message = await update.message.reply_text(
        f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...\n"
        f"üìù –¢–µ–∫—Å—Ç: {message_text[:100]}{'...' if len(message_text) > 100 else ''}"
    )

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for i, user in enumerate(all_users):
        try:
            await context.bot.send_message(chat_id=user.user_id, text=broadcast_text)
            sent_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
            if (i + 1) % 10 == 0:
                progress = (i + 1) / len(all_users) * 100
                await status_message.edit_text(
                    f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(all_users)} ({progress:.0f}%)\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(settings.BROADCAST_DELAY)

        except Exception as e:
            failed_count += 1
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {(sent_count / len(all_users) * 100):.1f}%

üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:
{message_text}

üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {format_datetime(datetime.now())}
"""

    await status_message.edit_text(result_text)

    db_manager.log_user_action(
        user_id,
        "broadcast_complete",
        f"–ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫"
    )


async def get_admin_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–∫—Ä—ã—Ç–∞—è admin –∫–æ–º–∞–Ω–¥–∞)"""
    user_id = update.effective_user.id

    if not settings.is_admin(user_id):
        return

    users = db_manager.get_all_users()

    text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)}):\n\n"

    for user in users[-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_emoji = user.status_emoji
        text += f"{status_emoji} {user.full_name} (@{user.username or '–Ω–µ—Ç'}) - {user.status_name}\n"

    if len(users) > 20:
        text += f"\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    await update.message.reply_text(text)