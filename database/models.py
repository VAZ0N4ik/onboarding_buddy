# database/models.py
"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è OnboardingBuddy
"""
import sqlite3
from datetime import datetime
from typing import Optional, List, Dict, Any
from dataclasses import dataclass
from enum import Enum


class UserStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    NEW = "new"
    PREBOARDING = "preboarding"
    PREBOARDED = "preboarded"
    ONBOARDING = "onboarding"
    COMPLETED = "completed"


@dataclass
class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str] = None
    full_name: Optional[str] = None
    position: Optional[str] = None
    status: UserStatus = UserStatus.NEW
    stage: int = 0
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    @classmethod
    def from_db_row(cls, row: tuple) -> 'User':
        """–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç User –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î"""
        if not row:
            return None

        return cls(
            user_id=row[0],
            username=row[1],
            full_name=row[2],
            position=row[3],
            status=UserStatus(row[4]) if row[4] else UserStatus.NEW,
            stage=row[5] or 0,
            created_at=datetime.fromisoformat(row[6]) if row[6] else None,
            updated_at=datetime.fromisoformat(row[7]) if row[7] else None
        )

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'user_id': self.user_id,
            'username': self.username,
            'full_name': self.full_name,
            'position': self.position,
            'status': self.status.value,
            'stage': self.stage,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }

    @property
    def progress_percentage(self) -> float:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        max_stage = 10
        return min(100, (self.stage / max_stage) * 100)

    @property
    def status_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        emoji_map = {
            UserStatus.NEW: "üÜï",
            UserStatus.PREBOARDING: "üîÑ",
            UserStatus.PREBOARDED: "‚úÖ",
            UserStatus.ONBOARDING: "üöÄ",
            UserStatus.COMPLETED: "üéâ"
        }
        return emoji_map.get(self.status, "‚ùì")

    @property
    def status_name(self) -> str:
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        name_map = {
            UserStatus.NEW: "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            UserStatus.PREBOARDING: "–ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
            UserStatus.PREBOARDED: "–ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
            UserStatus.ONBOARDING: "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
            UserStatus.COMPLETED: "–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"
        }
        return name_map.get(self.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")


@dataclass
class Feedback:
    """–ú–æ–¥–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    id: Optional[int] = None
    user_id: int = 0
    message: str = ""
    created_at: Optional[datetime] = None

    @classmethod
    def from_db_row(cls, row: tuple) -> 'Feedback':
        """–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Feedback –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î"""
        if not row:
            return None

        return cls(
            id=row[0],
            user_id=row[1],
            message=row[2],
            created_at=datetime.fromisoformat(row[3]) if row[3] else None
        )

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'message': self.message,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }


@dataclass
class UserAction:
    """–ú–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: Optional[int] = None
    user_id: int = 0
    action: str = ""
    details: str = ""
    created_at: Optional[datetime] = None

    @classmethod
    def from_db_row(cls, row: tuple) -> 'UserAction':
        """–°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç UserAction –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î"""
        if not row:
            return None

        return cls(
            id=row[0],
            user_id=row[1],
            action=row[2],
            details=row[3],
            created_at=datetime.fromisoformat(row[4]) if row[4] else None
        )

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'user_id': self.user_id,
            'action': self.action,
            'details': self.details,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }


class OnboardingStage:
    """–≠—Ç–∞–ø—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""

    # –ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥
    REGISTRATION = 1
    DOCUMENTS_INTRO = 2
    DOCUMENTS_MAIN = 3
    DOCUMENTS_TK = 4
    DOCUMENTS_COMPLETE = 5

    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥
    ONBOARDING_START = 6
    EMAIL_ACCESS = 7
    TEAM_INTRO = 8
    MEETINGS = 9
    COMPLETE = 10

    @classmethod
    def get_stage_name(cls, stage: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        stage_names = {
            1: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            2: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
            3: "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            4: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¢–ö –†–§",
            5: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–±–æ—Ä–¥–∏–Ω–≥–∞",
            6: "–ù–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞",
            7: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤",
            8: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π",
            9: "–ü–ª–∞–Ω–µ—Ä–∫–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏",
            10: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"
        }
        return stage_names.get(stage, f"–≠—Ç–∞–ø {stage}")

    @classmethod
    def get_next_stage_description(cls, current_stage: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
        next_stage_descriptions = {
            0: "–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–∞ '–ü—Ä–µ–±–æ—Ä–¥–∏–Ω–≥'",
            1: "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
            2: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            3: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¢–ö –†–§",
            4: "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            5: "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ä–∞–∑–¥–µ–ª—É '–û–Ω–±–æ—Ä–¥–∏–Ω–≥'",
            6: "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç–µ",
            7: "–ò–∑—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ",
            8: "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–ª–∞–Ω–µ—Ä–∫–∞–º–∏",
            9: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥",
            10: "–í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ"
        }
        return next_stage_descriptions.get(current_stage, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")


class DatabaseSchema:
    """–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    CREATE_USERS_TABLE = '''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            position TEXT,
            status TEXT DEFAULT 'new',
            stage INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    '''

    CREATE_FEEDBACK_TABLE = '''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    '''

    CREATE_USER_ACTIONS_TABLE = '''
        CREATE TABLE IF NOT EXISTS user_actions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            action TEXT,
            details TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    '''

    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    CREATE_INDEXES = [
        'CREATE INDEX IF NOT EXISTS idx_users_status ON users(status)',
        'CREATE INDEX IF NOT EXISTS idx_users_stage ON users(stage)',
        'CREATE INDEX IF NOT EXISTS idx_feedback_user_id ON feedback(user_id)',
        'CREATE INDEX IF NOT EXISTS idx_actions_user_id ON user_actions(user_id)',
        'CREATE INDEX IF NOT EXISTS idx_actions_created_at ON user_actions(created_at)'
    ]